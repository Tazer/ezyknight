@model dynamic
@{
    ViewBag.Title = "title";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>ezyKnight</h2>
<img src="/Content/player_sprite.gif" id="imgPlayer" style="display: none;" />
<img src="/Content/map_bg.gif" id="imgMapbg" style="display: none;" />
<div id="game-wrapper">

    <div id="class-wrapper">
        <h3>Choose your Warrior!</h3>
        <div class="selectClass">
            <ul>
                <li>
                    <p class="playerclass red" data-id="3"></p>
                </li>
                <li>
                    <p class="playerclass green" data-id="4"></p>
                </li>
                <li>
                    <p class="playerclass gold" data-id="1"></p>
                </li>
                <li>
                    <p class="playerclass blue" data-id="2"></p>
                </li>
                <li>
                    <p class="playerclass brown" data-id="0"></p>
                </li>
            </ul>
            <div style="clear: both;"></div>
        </div>
        <div>
            Hero name:
            <input type="text" id="playerName" /><input type="button" id="submitPlayerName" value="JOIN" /><input type="button" value="Send join to everyone" id="sendPlayerCollection" style="display: none;" />
        </div>
    </div>
    <canvas id="background" height="448" width="960" style="z-index: 1"></canvas>
    <canvas id="gameArea" height="448" width="960" style="z-index: 2"></canvas>
    @*<canvas id="hud" height="448" width="960"></canvas>*@
</div>
<div id="chat-wrapper">
    <fieldset>
        <legend>Chat</legend>
        <input type="text" id="chatMessage" />
        <input type="button" id="chatButton" value="Send" />
        <div id="chat-box">
            <ul id="chat">
            </ul>
        </div>
    </fieldset>
</div>
@section script{
    <script language="javascript">

        var config = {
            tileSize: 26,
            refreshRate: 1000 / 60,
            walkingSpeed: 120
        };

        var selectedClass = 0;
        var classes = [{ x: 0, y: 0, color: '#9a805d' }, { x: 26, y: 0, color: '#cbc42c' }, { x: 52, y: 0, color: '#5d7e9a' }, { x: 78, y: 0, color: '#c92e2e' }, { x: 104, y: 0, color: '#5d9a60' }];


        var playerX = 0;
        var playerY = 0;
        var players = [];
        var hasJoined = false;
        $(function () {

            $(".playerclass").click(function () {
                $(".playerclass").removeClass("active");
                $(this).addClass("active");
                selectedClass = $(this).data("id");
            });


            $.connection.hub.start().done(function () { console.log("Now connected!"); }).fail(function () { console.log("Could not Connect!"); });
            var gameHub = $.connection.gameHub;
            //console.log(gameHub.client);
            $("#submitPlayerName").click(function () {
                gameHub.server.join($("#playerName").val(), selectedClass).done(function (result) {

                    hasJoined = true;
                    $("#sendPlayerCollection").click();
                }).fail(function (error) {
                    console.log(error);
                });
            });

            $("#sendPlayerCollection").click(function () {
                $("#class-wrapper").hide();
                gameHub.server.sendPlayers();
            });

            gameHub.client.joined = function (result) {
                players = [];
                $.each(result, function () {
                    players.push({ id: this.Value.Id, name: this.Value.Name, x: this.Value.X, y: this.Value.Y, newX: this.Value.X, newY: this.Value.Y, skin: getSkinForClass(this.Value.Class) });
                });
            };
            gameHub.client.addChatMessage = function (message) {
                $("#chat").append("<li>" + message + "</li>");
            };
            gameHub.client.collision = function (player) {
                playerX = player.X;
                playerY = player.Y;
            };
            gameHub.client.moved = function (player) {
                $.each(players, function () {
                    if (this.id == player.Id) {
                        this.newX = player.X;
                        this.newY = player.Y;
                        this.orientation = player.Orientation;
                    }
                });
            };

            $("#chatButton").click(function () {
                var message = $("#chatMessage").val();
                $("#chat").append("<li>You: " + message + "</li>");
                gameHub.server.send(message)
                    .done(function (result) {

                    })
                    .fail(function (error) {
                    });
            });

            document.onkeyup = function (e) {
                if (hasJoined == false) {
                    return;
                }
                switch (e.keyCode) {
                    case 87: //W
                        playerY -= config.tileSize;
                        break;
                    case 65:
                        playerX -= config.tileSize;
                        break;
                    case 83:
                        playerY += config.tileSize;
                        break;
                    case 68:
                        playerX += config.tileSize;
                        break;
                    default:
                        break;
                }
                gameHub.server.move(playerX, playerY).fail(function (error) { console.log(error); });
            };

        });

        function animatePlayer(player) {
            //orientation:  Up = 0, Down = 1, Left = 2,Right = 3
            var tick = Math.round(config.tileSize / Math.round((config.walkingSpeed / config.refreshRate)));
            console.log(player);
            switch (player.orientation) {
                case 0:
                    if (player.y > player.newY)
                        player.y-= tick;
                    break;
                case 1:
                    if (player.y < player.newY)
                        player.y+= tick;
                    break;
                case 2:
                    if (player.x > player.newX)
                        player.x-=tick;
                    break;
                case 3:
                    if (player.x < player.newX)
                        player.x+=tick;
                    break;
                default:
                    break;
            }
        }

        function clearPlayers() {
            var canvas = document.getElementById("gameArea");
            var player = canvas.getContext("2d");
            player.clearRect(0, 0, 960, 448);
        }

        function updatePlayers() {
            $.each(players, function () {
                animatePlayer(this);
            });
        }

        function draw() {
            //Clear canvas
            clearPlayers();

            var canvas = document.getElementById("gameArea");
            //Draw background;

            //Draw Players and their names
            $.each(players, function () {
                var player = canvas.getContext("2d");
                var playerImage = document.getElementById("imgPlayer");
                player.drawImage(playerImage, this.skin.x, this.skin.y, config.tileSize, config.tileSize, this.x, this.y, config.tileSize, config.tileSize);
                player.fillStyle = this.skin.color;
                player.font = "15px Verdana";
                player.shadowOffsetX = 0;
                player.shadowOffsetY = 0;
                player.shadowBlur = 2;
                player.shadowColor = 'rgba(0, 0, 0, 1)';
                player.fillText(this.name, getNamePlacement(this.name, this.x), this.y);
            });

            //Draw hud


        };

        function getNamePlacement(name, x) {
            return x - (name.length * 2);
        }

        function getSkinForClass(classId) {
            return classes[classId];
        }


        window.requestAnimFrame = (function () {
            return window.requestAnimationFrame ||
                    window.webkitRequestAnimationFrame ||
                    window.mozRequestAnimationFrame ||
                    window.oRequestAnimationFrame ||
                    window.msRequestAnimationFrame ||
                    function (/* function */ callback, /* DOMElement */ element) {
                        window.setTimeout(callback, config.refreshRate);
                    };
        })();

        function gameloop() {
            requestAnimFrame(gameloop);
            updatePlayers();
            draw();
        }

        function init() {

            var canvas = document.getElementById("background");
            var ctx = canvas.getContext("2d");
            var map = document.getElementById("imgMapbg");
            ctx.drawImage(map, 0, 0, 960, 448);

            gameloop();
        }

        $(function () {
            init();
        });

    </script>
}
